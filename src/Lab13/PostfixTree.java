package Lab13;import java.util.Stack;/** * <p/> * A class that creates an expression tree * from a postfix expression of binary operators * and one-letter operands. * * @author Kirsty Alexandra Nguegang * @version 4/24/2018 */public class PostfixTree{    private BinaryNode<Character> root;    private final static String OPERATORS = "+-*/";    public PostfixTree()    {        this.root = null;    } // end default constructor    public PostfixTree(String postfix)    {        // TODO Project 2        // This secondary constructor creates the postfix tree        // stack to put partial expressions on        // #1 repeat for every character in the postfix        // #2 create subExpression tree of type BinaryNode<Character> with the current character        // #3 if the current character is an operator        // #3a get the operands from the stack        // #3b build up the subExpression by setting the left and right        //     subtrees to the appropriate operands removed from the stack        // #4 push subExpression on the stack        Stack<BinaryNode<Character>> exprStack = new Stack<>();        BinaryNode<Character> popElement1 = null;        BinaryNode<Character> popElement2 = null;        for (int i = 0; i < postfix.length(); i++)        {            char element = postfix.charAt(i);            BinaryNode<Character> current = new BinaryNode<>(element);            switch(element)            {                case '+':                case '-':                case '*':                case '/':                {                    if (!exprStack.empty())                    {                        popElement1 = exprStack.pop();                        popElement2 = exprStack.pop();                    }                    current.setRightChild(popElement1);                    current.setLeftChild(popElement2);                }                default:                {                    exprStack.push(current);                }            }        }        root = exprStack.pop();        // #5 At the end of it all the entire expression should be the        //    top expression on the stack, so remove it from the stack        //    and point root to it.        //    Note: that the input postfix string and the postorder output        //          should be the same.    } // end constructor    public void inOrderTraversal()    {        inOrder(this.root);        System.out.println();    } // end inOrderTraversal    private void inOrder(BinaryNode<Character> node)    {        if (node != null)        {            inOrder(node.getLeftChild());            System.out.print(node.getData() + " ");            inOrder(node.getRightChild());        } // end if    } // end inOrder    public void postOrderTraversal()    {        // TODO Project 2        postOrder(this.root);        System.out.println();    } // end postOrderTraversal    private void postOrder(BinaryNode<Character> node)    {        // TODO Project 2        if (node != null)        {            postOrder(node.getLeftChild());            postOrder(node.getRightChild());            System.out.print(node.getData() + " ");        }    } // end postOrder    public static void main(String[] args)    {        String expression = "ab*c+";        System.out.println("The first postfix expression is:\n" + expression);        PostfixTree tree = new PostfixTree(expression);        System.out.println("\nThe inorder traversal is:");        tree.inOrderTraversal();        System.out.println("\nThe postorder traversal is:");        tree.postOrderTraversal();        // . . .        expression = "ab-c*def-+g/+";        System.out.println("\nThe second postfix expression is:\n" + expression);        tree = new PostfixTree(expression);        System.out.println("\nThe inorder traversal is:");        tree.inOrderTraversal();        System.out.println("\nThe postorder traversal is:");        tree.postOrderTraversal();    } // end main} // end PostfixTree		