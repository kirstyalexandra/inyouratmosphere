package Lab03;import java.util.Arrays;/** * A class that implements the ADT set by using a chain of linked nodes. * The set is never full. * * @author Kirsty Alexandra Nguegang * @version 2/6/2018 */public class LinkedSetWithChainOfNodes<T extends Comparable<? super T>> implements SetInterface<T>{    private Node<T> firstNode;            // Head reference to first node    public LinkedSetWithChainOfNodes()    {        //TODO Project2        this.firstNode = null;    } // end default constructor    public void clear()    {        //TODO Project2        while (!isEmpty())            remove();    } // end clear    public boolean add(T newEntry)    {        //TODO Project2        Node<T> newNode = new Node<>(newEntry);        if (!(this.contains(newEntry)))        {            newNode.next = this.firstNode;  // make new node reference rest of chain            // (firstNode is null if chain is empty)            this.firstNode = newNode;       // new node is at beginning of chain            return true; //THIS IS A STUB        }        return true;    } // end add    /**     * Locates a given entry within this bag.     * Returns a reference to the node containing the entry, if located,     * or null otherwise.     *     * Utilized by removeElement method     */    private Node<T> getReferenceTo(T anEntry)    {        //TODO Project2        boolean found = false;        Node<T> currentNode = this.firstNode;        while (!found && (currentNode != null))        {            if (anEntry.equals(currentNode.data))                found = true;            else                currentNode = currentNode.next;        } // end while        return currentNode; //THIS IS A STUB    } // end getReferenceTo    public boolean removeElement(T anEntry)    {        //TODO Project2        boolean result = false;        Node<T> nodeN = getReferenceTo(anEntry);        if (nodeN != null)        {            nodeN.data = this.firstNode.data; // replace located entry with entry in first node            this.firstNode = this.firstNode.next; // remove first node from chain            result = true;        } // end if        return result;        //THIS IS A STUB    } // end remove    public T remove()    {        //TODO Project2        T result = null;        if (this.firstNode != null)        {            result = this.firstNode.data;            this.firstNode = this.firstNode.next; // remove first node from chain        } // end if        return result; //THIS IS A STUB    } // end remove    public boolean contains(T anEntry)    {        //TODO Project2        return getReferenceTo(anEntry) != null;        //THIS IS A STUB    } // end contains    public boolean isEmpty()    {        //TODO Project2        return this.firstNode == null; //THIS IS A STUB    } // end getLength    public T[] toArray()    {        //TODO Project2        int counter = 0;        Node<T> currentNode = this.firstNode;        while (currentNode != null)        {            counter++;            currentNode = currentNode.next;        } // end while        // the cast is safe because the new array contains null entries        @SuppressWarnings("unchecked")        T[] result = (T[]) new Comparable<?>[counter]; // unchecked cast        int index = 0;        currentNode = this.firstNode;        while (currentNode != null && index < result.length)        {            result[index] = currentNode.data;            index++;            currentNode = currentNode.next;        } // end while        return result;         //THIS IS A STUB    } // end toArray    // Displays a set.    public void displaySet()    {        //TODO Project2        int counter = 0;        if (this.firstNode != null)        {            Node<T> currentNode = this.firstNode;            while (currentNode != null)            {                currentNode = currentNode.next;                counter++;            }            System.out.println("The set contains " + counter + " string(s), as follows: ");            currentNode = this.firstNode;            while (currentNode != null)            {                System.out.print(currentNode.data + " ");                currentNode = currentNode.next;            }            System.out.println();        }        else            System.out.println("The set is empty.");    } // end displaySet    // A class of nodes for a chain of linked nodes.    private class Node<S>    {        private S data; // Data portion        private Node next; // Link to next node        private Node(S dataPortion)        {            this(dataPortion, null);        } // end constructor        private Node(S dataPortion, Node nextNode)        {            this.data = dataPortion;            this.next = nextNode;        } // end constructor    } // end Node    public static void main(String[] args)    {        String[] inputData = {"A", "B", "C", "D", "A", "C", "B", "B"};        System.out.println("Creating aSet and adding to it elements from inputData: " + Arrays.toString(inputData));        SetInterface<String> aSet = new LinkedSetWithChainOfNodes<>();        for (int i=0; i < inputData.length; i++)        {            aSet.add(inputData[i]);        }        aSet.displaySet();        System.out.println("\nClearing aSet");        aSet.clear();        aSet.displaySet();        System.out.println("aSet isEmpty returns " + aSet.isEmpty());        System.out.println("\nCreating set1 and set2");        SetInterface<String> set1 = new LinkedSetWithChainOfNodes<>();        SetInterface<String> set2 = new LinkedSetWithChainOfNodes<>();        System.out.println("\nAdding elements to set1");        set1.add("A");        set1.add("A");        set1.add("B");        set1.add("A");        set1.add("C");        set1.add("A");        System.out.println("set1 is ");        set1.displaySet();        System.out.println("\nAdding elements to set2");        set2.add("A");        set2.add("B");        set2.add("B");        set2.add("A");        set2.add("C");        set2.add("C");        set2.add("D");        System.out.println("set2 is ");        set2.displaySet();        System.out.println("\nset1 contains A: " + set1.contains("A"));        System.out.println("set1 contains E: " + set1.contains("E"));        set1.removeElement("B");        System.out.println("After removing B from set1, ");        set1.displaySet();        System.out.println("After removing " + set1.remove() + " from set1, ");        set1.displaySet();    } // end main} // end LinkedSetWithChainOfNodes