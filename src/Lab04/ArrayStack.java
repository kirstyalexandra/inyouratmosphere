package Lab04;import java.text.DecimalFormat;import java.util.Arrays;import java.util.EmptyStackException;/** * A class of stacks whose entries are stored in an array. * * @author Kirsty Alexandra Nguegang * @version 02/13/2018 */public final class ArrayStack<T> implements TextbookStackInterface<T>{    private T[] myStack;    // Array of myStack entries    private int topIndex; // Index of top entry    private boolean initialized = false;    private static final int DEFAULT_CAPACITY = 50;    private static final int MAX_CAPACITY = 10000;    public ArrayStack()    {        // TODO PROJECT #2        this(DEFAULT_CAPACITY);        this.topIndex = this.myStack.length;    } // end default constructor    public ArrayStack(int initialCapacity)    {        // TODO PROJECT #2        this.myStack = (T[]) new Object[initialCapacity];        initialized = true;        this.topIndex = this.myStack.length;// unchecked cast    } // end constructor    public void push(T newEntry)    {        // TODO PROJECT #2        checkInitialization();        ensureCapacity();        this.myStack[topIndex - 1] = newEntry;        topIndex--;    } // end push    public T peek() throws InsufficientNumberOfElementsOnStackException    {        // TODO PROJECT #2        T result = null;        if (isEmpty())        {            throw new InsufficientNumberOfElementsOnStackException("peek operation failed");        } else        {            result = this.myStack[topIndex];        }        return result;// THIS IS A STUB    } // end peek    public T pop() throws InsufficientNumberOfElementsOnStackException    {        // TODO PROJECT #2        checkInitialization();        T result = null;        if (isEmpty())        {            throw new InsufficientNumberOfElementsOnStackException("pop operation failed");        } else        {            result = this.myStack[topIndex];            topIndex++;        }        return result;    }    public boolean isEmpty() // something's wrong here    {        // TODO PROJECT #2        boolean result;        result = (this.myStack.length == topIndex) ? true : false;        return result; //THIS IS A STUB    } // end isEmpty    public void clear()    {        // TODO PROJECT #2        while (!isEmpty())        {            pop();        }    } // end clear    // Throws an exception if this object is not initialized.    private void checkInitialization() throws SecurityException    {        // TODO PROJECT #2        if (!this.initialized)            throw new SecurityException("Uninitialized object used " +                    "to call an ArrayBag method.");    } // end checkInitialization    // Throws an exception if the client requests a capacity that is too large.    private void checkCapacity(int capacity) throws IllegalStateException    {        // TODO PROJECT #2        if (capacity > MAX_CAPACITY)            throw new IllegalStateException("Attempt to create a bag whose capacity exceeds " +                    "allowed maximum of " + MAX_CAPACITY);    } // end checkCapacity    // Doubles the size of the array myStack if it is full    // Precondition: checkInitialization has been called.    private void ensureCapacity()    {        // TODO PROJECT #2        if (topIndex == 0)        {            int newLength = 2 * this.myStack.length;            this.topIndex = this.myStack.length;            System.out.println("--> The stack capacity has been doubled and it is now " + newLength + " with topIndex: " + this.topIndex);            T[] temp = Arrays.copyOf(this.myStack, newLength);            T[] newArr = (T[]) new Object[newLength];            int j = 0;            for (int i = this.myStack.length; i < newArr.length; i++)            {                newArr[i] = this.myStack[j];                j++;            }            this.topIndex = j;            this.myStack = newArr;        }    } // end ensureCapacity    // These methods are only for testing of the array implementation    public int getTopIndex()    {        return this.topIndex;    }    public int getCapacity()    {        return this.myStack.length;    }	public static void main(String[] args)	{		System.out.println("*** Creating a stack with default constructor ***");		TextbookStackInterface<String> defaultStack = new ArrayStack<>();		System.out.println("---> The stack capacity is set by the constructor to: " + defaultStack.getCapacity());		System.out.println("---> The topIndex is: " + defaultStack.getTopIndex());		System.out.println("\n---> isEmpty() returns " + defaultStack.isEmpty());		int topLocation = defaultStack.getTopIndex();		int capacity = defaultStack.getCapacity();		if (topLocation == capacity)			System.out.println("CORRECT - the top index is set to " + capacity);		else			System.out.println("INCORRECT - the top index is set to " + topLocation);		System.out.println("\n---> Adding to stack to get: " +				"Joe Jane Jill Jess Jim");		defaultStack.push("Jim");		defaultStack.push("Jess");		defaultStack.push("Jill");		defaultStack.push("Jane");		defaultStack.push("Joe");		System.out.println("---> Done adding 5 elements; the topIndex is: " + defaultStack.getTopIndex());		System.out.println("---> isEmpty() returns " + defaultStack.isEmpty());		System.out.println("\n--> Testing peek and pop:");		while (!defaultStack.isEmpty())		{			String top = defaultStack.peek();			System.out.println(top + " is at the top of the stack.");			top = defaultStack.pop();			System.out.println(top + " is removed from the stack.");		} // end while		System.out.println("--> The stack should be empty: ");		System.out.println("isEmpty() returns " + defaultStack.isEmpty());		System.out.println("\n--> Adding to stack to get: " +				"Jim Jess Joe");		defaultStack.push("Joe");		defaultStack.push("Jess");		defaultStack.push("Jim");		System.out.println("---> Done adding 3 elements; the topIndex is: " + defaultStack.getTopIndex());		System.out.println("\n--> Testing clear:");		defaultStack.clear();		System.out.println("--> The stack should be empty: ");		System.out.println("isEmpty() returns " + defaultStack.isEmpty());		try		{			System.out.println("defaultStack.peek() returns: ");			System.out.println(defaultStack.peek());		}		catch (InsufficientNumberOfElementsOnStackException inoeose)		{			System.out.println(" CORRECT - exception has been thrown: " + inoeose.getMessage());		}		try		{			System.out.println("defaultStack.pop() returns: ");			System.out.println(defaultStack.pop());		}		catch (InsufficientNumberOfElementsOnStackException inoeose)		{			System.out.println(" CORRECT - exception has been thrown: " + inoeose.getMessage());		}		System.out.println("\n\n*** Creating a stack with the secondary constructor ***");		TextbookStackInterface<String> smallStack = new ArrayStack<>(3);		System.out.println("---> The stack capacity is set by the constructor to: " + smallStack.getCapacity());		System.out.println("---> The topIndex is: " + smallStack.getTopIndex());		System.out.println("\n--> isEmpty() returns " + smallStack.isEmpty());		System.out.println("\n--> Adding to stack to get: " +				"Joe Jane Jill Jess Jim");		smallStack.push("Jim");		smallStack.push("Jess");		smallStack.push("Jill");		smallStack.push("Jane");		smallStack.push("Joe");		System.out.println("---> Done adding 5 elements; the topIndex is: " + smallStack.getTopIndex());		System.out.println("--> isEmpty() returns " + smallStack.isEmpty());		System.out.println("\n-->Testing peek and pop:");		while (!smallStack.isEmpty())		{			String top = smallStack.peek();			System.out.println(top + " is at the top of the stack.");			top = smallStack.pop();			System.out.println(top + " is removed from the stack.");		} // end while		System.out.println("--> The stack should be empty: ");		System.out.println("isEmpty() returns " + smallStack.isEmpty());		topLocation = smallStack.getTopIndex();		capacity = smallStack.getCapacity();		if (topLocation == capacity)			System.out.println("CORRECT - the top index is set to " + capacity);		else			System.out.println("INCORRECT - the top index is set to " + topLocation);		System.out.println("\n--> Adding to stack to get: " +				"Jim Jess Joe");		smallStack.push("Joe");		smallStack.push("Jess");		smallStack.push("Jim");		System.out.println("---> Done adding 3 elements; the topIndex is: " + smallStack.getTopIndex());		System.out.println("\n--> Testing clear:");		smallStack.clear();		System.out.println("--> The stack should be empty: ");		System.out.println("isEmpty() returns " + smallStack.isEmpty());		try		{			System.out.println("smallStack.peek() returns: ");			System.out.println(smallStack.peek());		}		catch (InsufficientNumberOfElementsOnStackException inoeose)		{			System.out.println(" CORRECT - exception has been thrown: " + inoeose.getMessage());		}		try		{			System.out.println("smallStack.pop() returns: ");			System.out.println(smallStack.pop());		}		catch (InsufficientNumberOfElementsOnStackException inoeose)		{			System.out.println(" CORRECT - exception has been thrown: " + inoeose.getMessage());		}		System.out.println("*** Done ***");	} // end main} // end ArrayStack