package Lab04;/** * A class that provides methods for sorting a stack of * Comparable objects, placing the smallest at the top of the stack. * * @author Kirsty Alexandra Nguegang * @version 02/13/2018 */import java.util.*;public class SortStack<T extends Comparable<? super T>>{    private Stack<T> stack;    public SortStack()    {        this.stack = new Stack<>();    }    /**     * Sorts a stack.     *     * @return a sorted stack     */    public Stack<T> sort()    {        // TODO PROJECT #6 Part1        // this.stack represents the original stack        Stack<T> destination = new Stack<>();        Stack<T> temp = new Stack<>();        T tempToDest = null;        T destToTemp = null;        T originToDest = null;        T topO = null;        T result = null;        if (!stack.empty())        {            originToDest = destination.push(this.stack.pop());            System.out.println("push " + originToDest + " from original to destination");        }        while (!this.stack.empty())        {            topO = this.stack.pop();            System.out.println("Moving entries from destination to temp");            while(!destination.empty() && topO.compareTo(destination.peek()) > 0)            {                    destToTemp = temp.push(destination.pop());                    System.out.println("--> push " + destToTemp + "from destination to temp");            }            result = destination.push(topO);            System.out.println("push " + result + " to destination");            System.out.println("Moving entries from temp to destination");            while (!temp.empty())            {                tempToDest = destination.push(temp.pop());                System.out.println("--> push " + tempToDest + " from temp to destination");            }        }        return destination;    }    /**     * Sorts a stack. (revised version)     *     * @return a sorted stack     */    public Stack<T> sortRevised()    {        // TODO PROJECT #6 Part2        // this.stack represents the original stack        Stack<T> destination = new Stack<>();        Stack<T> temp = new Stack<>();        T tempToDest = null;        T destToTemp = null;        T originToDest = null;        T topO = null;        T result = null;        originToDest = destination.push(this.stack.pop());        System.out.println("push " + originToDest + " from original to destination");        while (!this.stack.empty())        {            topO = this.stack.pop();            System.out.println("Moving entries from destination to temp");            while(!destination.empty() && topO.compareTo(destination.peek()) > 0)            {                destToTemp = temp.push(destination.pop());                System.out.println("--> push " + destToTemp + "from destination to temp");            }            System.out.println("Moving entries from temp to destinatinon");            while (!temp.empty() && topO.compareTo(temp.peek()) < 0 )            {                tempToDest = destination.push(temp.pop());                System.out.println("--> push " + tempToDest + " from temp to destination");            }            result = destination.push(topO);            System.out.println("push " + result + " to destination");        }        while (!temp.empty())        {            tempToDest = destination.push(temp.pop());            System.out.println("--> push " + tempToDest + " from temp to destination");        }        return destination;    }    public void setStack(T... elements)    {        this.stack.clear();        System.out.println("Setting the original stack to:");        for (int i = 0; i < elements.length; i++)        {            this.stack.push(elements[i]);            System.out.print(elements[i] + " ");        }        System.out.println();    }    public static void main(String[] args)    {        SortStack sc = new SortStack();        sc.setStack("03", "09", "01", "04", "06", "05", "07", "08", "00", "02");        System.out.println("\n***Calling sort method***");        Stack<String> sortedStack = sc.sort();        System.out.println("\nStack should be sorted (with sort()) ....");        while (!sortedStack.isEmpty())            System.out.print(sortedStack.pop() + " ");        System.out.println();        System.out.println("\n===================================");        System.out.println("\nTesting the revised method");        sc.setStack("03", "09", "01", "04", "06", "05", "07", "08", "00", "02");        System.out.println("\n***Calling sortRevised method***");        sortedStack = sc.sortRevised();        System.out.println("\nStack should be sorted (with sortRevised()) ....");        while (!sortedStack.isEmpty())            System.out.print(sortedStack.pop() + " ");        System.out.println();    } // end main} // end SortStack